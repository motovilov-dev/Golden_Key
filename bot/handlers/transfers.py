from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from typing import Optional, Union


def _get_transfers_tabs_keyboard(active: str = "transfer") -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ ¬´–¢—Ä–∞–Ω—Å—Ñ–µ—Ä¬ª, ¬´–ê—Ä–µ–Ω–¥–∞ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º¬ª, ¬´–ó–∞–∫–∞–∑—ã¬ª.

    Args:
        active (str): –ö–∞–∫–∞—è –≤–∫–ª–∞–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç (transfer|rent|orders)
    """
    def _button(name: str, text: str, callback: str):
        # –ü–æ–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É ¬´–∑–æ–ª–æ—Ç—ã–º¬ª –∫—Ä—É–∂–∫–æ–º, –∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é ‚Äî –ø—É—Å—Ç—ã–º.
        prefix = "üîò " if name == active else "‚ö™Ô∏è "
        return InlineKeyboardButton(text=f"{prefix}{text}", callback_data=callback)

    keyboard = [
        [
            _button("rent", "–ê—Ä–µ–Ω–¥–∞ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º", "transfers:rent"),
        ],
        [
            _button("transfer", "–¢—Ä–∞–Ω—Å—Ñ–µ—Ä", "transfers:main"),
            _button("orders", "–ó–∞–∫–∞–∑—ã", "transfers:orders"),
        ]
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É ¬´–ù–∞–∑–∞–¥¬ª –ø–æ–¥ –≤–∫–ª–∞–¥–∫–∞–º–∏
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def main_transfers(call: CallbackQuery, state: FSMContext, data) -> None:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ ¬´–¢—Ä–∞–Ω—Å—Ñ–µ—Ä¬ª –∏ –ø–æ–¥-–≤–∫–ª–∞–¥–æ–∫.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ callback-data:
    ‚Ä¢ transfers:main ‚Äì —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–¢—Ä–∞–Ω—Å—Ñ–µ—Ä)
    ‚Ä¢ transfers:rent ‚Äì –∞—Ä–µ–Ω–¥–∞ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º
    –ü—Ä–æ—á–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä orders) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö handler-–∞—Ö.
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥-–∫–æ–º–∞–Ω–¥—É: transfers:<subcommand>
    try:
        query = call.data.split(":")[1]
    except Exception:
        query = "main"

    if query == "main":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç–∞
        await _show_route_screen(call, state)
    elif query == "from":
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await call.answer()
        prompt = await call.message.answer("<b>üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>")
        await state.update_data(prompt_msg_id=prompt.message_id)
        await state.set_state(STATE_SET_FROM)
    elif query == "to":
        await call.answer()
        prompt = await call.message.answer("<b>üèÅ –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</b>")
        await state.update_data(prompt_msg_id=prompt.message_id)
        await state.set_state(STATE_SET_TO)
    elif query == "swap":
        state_data = await state.get_data()
        from_addr = state_data.get("transfer_from")
        to_addr = state_data.get("transfer_to")
        await state.update_data(transfer_from=to_addr, transfer_to=from_addr)
        await _show_route_screen(call, state)
    elif query == "rent":
        await call.message.edit_text(
            "<b>üöô –ê—Ä–µ–Ω–¥–∞ —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º</b>\n\n<i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ—á–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª.</i>",
            reply_markup=_get_transfers_tabs_keyboard(active="rent")
        )
    elif query == "orders":
        await call.message.edit_text(
            "<b>üöó –¢—Ä–∞–Ω—Å—Ñ–µ—Ä</b>\n\n<i>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</i>",
            reply_markup=_get_transfers_tabs_keyboard(active="orders")
        )
    else:
        # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–æ–¥-–∫–æ–º–∞–Ω–¥–∞ ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞
        await call.message.edit_text(
            "<b>üöó –¢—Ä–∞–Ω—Å—Ñ–µ—Ä</b>",
            reply_markup=_get_transfers_tabs_keyboard(active="transfer")
        )


# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π ----------------------------------------------------

STATE_SET_FROM = "transfers:set_from"
STATE_SET_TO = "transfers:set_to"

# ---------------------------------------------------------------------------


def _build_route_text(from_addr: Optional[str], to_addr: Optional[str]) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞."""
    from_part = from_addr if from_addr else "<i>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å</i>"
    to_part = to_addr if to_addr else "<i>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å</i>"

    return f"""
<b>üöó –ú–∞—Ä—à—Ä—É—Ç</b>

<b>–û—Ç–∫—É–¥–∞:</b> {from_part}
<b>–ö—É–¥–∞:</b> {to_part}
"""


def _get_route_keyboard(from_addr: Optional[str], to_addr: Optional[str]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–º–µ–Ω–Ω–æ —ç–∫—Ä–∞–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞ (–∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ ¬´–¢—Ä–∞–Ω—Å—Ñ–µ—Ä¬ª)."""
    keyboard: list[list[InlineKeyboardButton]] = []

    # –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–∫—É–¥–∞¬ª
    keyboard.append([
        InlineKeyboardButton(
            text="üìç –û—Ç–∫—É–¥–∞" if not from_addr else f"üìç {from_addr[:20]}‚Ä¶" if len(from_addr) > 20 else f"üìç {from_addr}",
            callback_data="transfers:from"
        )
    ])

    # –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏¬ª
    keyboard.append([
        InlineKeyboardButton(text="‚ÜïÔ∏è –ü–æ–º–µ–Ω—è—Ç—å", callback_data="transfers:swap")
    ])

    # –ö–Ω–æ–ø–∫–∞ ¬´–ö—É–¥–∞¬ª
    keyboard.append([
        InlineKeyboardButton(
            text="üèÅ –ö—É–¥–∞" if not to_addr else f"üèÅ {to_addr[:20]}‚Ä¶" if len(to_addr) > 20 else f"üèÅ {to_addr}",
            callback_data="transfers:to"
        )
    ])

    # –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª —Å–Ω–∏–∑—É
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# ---------------------------------------------------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# ---------------------------------------------------------------------------


# ---------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
# ---------------------------------------------------------------------------


async def _show_route_screen(call: Union[CallbackQuery, Message], state: FSMContext):
    """–í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é."""

    # –î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
    st = await state.get_data()
    from_addr = st.get("transfer_from")
    to_addr = st.get("transfer_to")

    text = _build_route_text(from_addr, to_addr)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–≤–∫–ª–∞–¥–∫–∏ + –º–∞—Ä—à—Ä—É—Ç) –±–µ–∑ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ ¬´–ù–∞–∑–∞–¥¬ª
    tabs_kb = _get_transfers_tabs_keyboard(active="transfer").inline_keyboard[:-1]  # cut last row (back)
    route_kb = _get_route_keyboard(from_addr, to_addr).inline_keyboard
    keyboard = InlineKeyboardMarkup(inline_keyboard=tabs_kb + route_kb)

    bot = call.bot
    chat_id = call.message.chat.id if isinstance(call, CallbackQuery) else call.chat.id

    # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –ø—Ä–∏—à—ë–ª –ø–æ –∫–æ–ª–ª–±—ç–∫—É ‚Äì —É–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à—ë–ª –∫–æ–ª–ª–±—ç–∫
    if isinstance(call, CallbackQuery):
        try:
            await bot.delete_message(chat_id, call.message.message_id)
        except Exception:
            pass

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å
    prev_msg_id = st.get("route_msg_id")
    if prev_msg_id:
        try:
            await bot.delete_message(chat_id, prev_msg_id)
        except Exception:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    new_msg = await bot.send_message(chat_id, text, reply_markup=keyboard)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π id
    await state.update_data(route_msg_id=new_msg.message_id)

    # –î–ª—è callback –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª
    if isinstance(call, CallbackQuery):
        try:
            await call.answer()
        except Exception:
            pass


# ---------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–æ–≤ (Message)
# ---------------------------------------------------------------------------


async def set_from_address(message: Message, state: FSMContext, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
    await state.update_data(transfer_from=message.text)
    await state.set_state(None)
    state_data = await state.get_data()
    # –£–¥–∞–ª—è–µ–º prompt –∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt_id = state_data.get("prompt_msg_id")
    if prompt_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_id)
        except Exception:
            pass
        await state.update_data(prompt_msg_id=None)
    try:
        await message.delete()
    except Exception:
        pass
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –º–∞—Ä—à—Ä—É—Ç–∞
    await _show_route_screen(message, state)


async def set_to_address(message: Message, state: FSMContext, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
    await state.update_data(transfer_to=message.text)
    await state.set_state(None)
    state_data = await state.get_data()
    prompt_id = state_data.get("prompt_msg_id")
    if prompt_id:
        try:
            await message.bot.delete_message(message.chat.id, prompt_id)
        except Exception:
            pass
        await state.update_data(prompt_msg_id=None)
    try:
        await message.delete()
    except Exception:
        pass
    await _show_route_screen(message, state) 