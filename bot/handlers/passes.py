from db.repositories.products_repository import ProductsRepository
from db.models.gk_base_info import *
from keyboards.inline import *
from utils.messages.replace import *
from utils.clients.GK_ApiClient import AsyncAPIClient
from db.sessions import AsyncSessionFactory
from messages.ru_config import RussianMessages
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger

async def main_passes(call: CallbackQuery, state: FSMContext, data) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–æ—Ö–æ–¥–æ–≤"""
    db_user = data.get('user')
    gk_user = data.get('gk_user')
    query = call.data.split(':')[1]
    
    async with AsyncSessionFactory() as session:
        products_repository = ProductsRepository(session)
        products = await products_repository.get_all()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é count
    sorted_products = sorted(products, key=lambda x: x.count, reverse=False)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –∏ –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—ã
    russian_passes = [p for p in sorted_products if not p.foreign]
    foreign_passes = [p for p in sorted_products if p.foreign]

    if query == 'main':
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö
        passes_text = RussianMessages().available_passes
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ø—Ä–æ—Ö–æ–¥—ã
        if russian_passes:
            passes_text += "\nüá∑üá∫ <b>–î–ª—è –†–æ—Å—Å–∏–∏:</b>\n\n"
            for product in russian_passes:
                passes_text += f"üì¶ {product.name}\n"
                passes_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product.price} ‚ÇΩ\n"
                passes_text += f"üé´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤: {product.count}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—ã
        if foreign_passes:
            passes_text += "\nüåç <b>–î–ª—è –∑–∞—Ä—É–±–µ–∂–∞:</b>\n\n"
            for product in foreign_passes:
                passes_text += f"üì¶ {product.name}\n"
                passes_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product.price} ‚ÇΩ\n"
                passes_text += f"üé´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤: {product.count}\n\n"
        
        try:
            await call_replace_answer(
                call,
                passes_text,
                reply_markup=get_buy_passes_keyboard(russian_passes, foreign_passes)
            )
        except Exception as e:
            raise e
    elif query == 'buy':
        if not gk_user:
            await call.answer('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', show_alert=True)
            return
        await call.message.edit_text('–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥', reply_markup=get_buy_passes_keyboard(russian_passes, foreign_passes))
        product_id = call.data.split(':')[2]
        async with AsyncSessionFactory() as session:
            products_repository = ProductsRepository(session)
            product = await products_repository.get_by_gk_id(int(product_id))
        if not product:
            await call.answer('–ü—Ä–æ—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        else:
            await state.update_data(product_id=product_id)
            async with AsyncAPIClient() as client:
                banks = await client.get_bakns()
            await call.message.edit_text(f'''
<b>–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—Ö–æ–¥–∞</b>

üì¶ {product.name}                            
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product.price} ‚ÇΩ
üé´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤: {product.count}

<i>–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>
''', reply_markup=get_choose_banks(banks=banks, call_prefix=f'passes:pay:{product_id}:'))
    
    elif query == 'pay':
        product_id = call.data.split(':')[2]
        async with AsyncSessionFactory() as session:
            products_repository = ProductsRepository(session)
            product = await products_repository.get_by_gk_id(int(product_id))
        if not product:
            await call.answer('–ü—Ä–æ—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        bank = call.data.split(':')[3]
        print('stage1')
        async with AsyncAPIClient(token=gk_user.token) as client:
            try:
                make_order = await client.make_order(
                    bank=bank, 
                    product_id=product_id, 
                    email=gk_user.email,
                    quantity=product.count
                )
                print(make_order)
            except Exception as e:
                logger.warning(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ | {e}')
                return await call.message.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            else:
                return await call.message.edit_text(f'''
<b>–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—Ö–æ–¥–∞</b>

üì¶ {product.name}                            
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product.price} ‚ÇΩ
üé´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ö–æ–¥–æ–≤: {product.count}

<i>–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–∫—É–ø–∫—É</i>
''', reply_markup=payment_keyboard(make_order.get('data')))

        
