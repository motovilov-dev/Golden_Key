from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from db.models.user import GkUser
from db.models.gk_base_info import *
from utils.clients.types.passes import Pass
from typing import List, Optional
from utils.clients.types.services import RewardItem

def get_main_keyboard(gk_user: bool = False, debug: bool = False) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    keyboard = [
        [
            InlineKeyboardButton(text="üèòÔ∏è –ë–∏–∑–Ω–µ—Å –∑–∞–ª—ã", callback_data="halls:cities"),
            InlineKeyboardButton(text="üéüÔ∏è –ö—É–ø–∏—Ç—å –≤–∏–∑–∏—Ç", callback_data="passes:main"),
        ]
    ]
    if gk_user is True or debug:
        keyboard.append([InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="login:main")])
        keyboard.append([InlineKeyboardButton(text="üîå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", callback_data="services:main")])
        keyboard.append([
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üåê QR", callback_data="qr"),
        ])
        keyboard.append([
            InlineKeyboardButton(text="üí≥ –ó–∞–∫–∞–∑—ã", callback_data="orders"),
            InlineKeyboardButton(text="üìá –í–∏–∑–∏—Ç—ã", callback_data="sessions:main"),
        ])
    else:
        keyboard.append([InlineKeyboardButton(text="üîë –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", callback_data="login:main")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_back_keyboard(buttons: list = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥"""

    if buttons:
        keyboard = []
        keyboard.append(buttons)
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")])
    else:
        keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_halls_cities_keyboard(cities: List[dict]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
    
    –ì–æ—Ä–æ–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ ‚â§6 —Å–∏–º–≤–æ–ª–æ–≤ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ (–∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏),
    –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ >6 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ (–∏–¥—É—Ç –ø–æ—Å–ª–µ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö).
    
    Args:
        cities: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –≥–æ—Ä–æ–¥–∞–º–∏ (–¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏ 'name' –∏ 'gk_id')
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
    """
    keyboard = []
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã
    short_names = []  # ‚â§6 —Å–∏–º–≤–æ–ª–æ–≤
    long_names = []   # >6 —Å–∏–º–≤–æ–ª–æ–≤
    
    for city in cities:
        if len(city['name']) <= 14:
            short_names.append(city)
        else:
            long_names.append(city)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫—É
    for i in range(0, len(short_names), 2):
        row = []
        # –ü–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –≤ –ø–∞—Ä–µ
        city = short_names[i]
        row.append(InlineKeyboardButton(
            text=city['name'],
            callback_data=f"halls:city:{city['gk_id']}"
        ))
        
        # –í—Ç–æ—Ä–æ–π –≥–æ—Ä–æ–¥ –≤ –ø–∞—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(short_names):
            city = short_names[i + 1]
            row.append(InlineKeyboardButton(
                text=city['name'],
                callback_data=f"halls:city:{city['gk_id']}"
            ))
        
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫—É
    for city in long_names:
        keyboard.append([InlineKeyboardButton(
            text=city['name'],
            callback_data=f"halls:city:{city['gk_id']}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_hall_carousel_keyboard(halls: List[Hall], current_index: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ –∑–∞–ª–æ–≤.
    
    Args:
        halls: –°–ø–∏—Å–æ–∫ –∑–∞–ª–æ–≤
        current_index: –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∑–∞–ª–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"halls:prev:{current_index}"),
            InlineKeyboardButton(text=f"{current_index + 1}/{len(halls)}", callback_data="ignore"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"halls:next:{current_index}"),
        ],
        [
            InlineKeyboardButton(text="üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"halls:details:{halls[current_index].gk_id}"),
        ],
        [
            InlineKeyboardButton(text="üí∞–ö—É–ø–∏—Ç—å –≤–∏–∑–∏—Ç", callback_data=f"passes:main"),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data="halls:cities"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_services_carousel_keyboard(services: List[RewardItem], current_index: int, service_id: int, target_text: str = '–æ–±–º–µ–Ω—è—Ç—å', target_callback: str = None) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—É—Å–µ–ª–∏ —Å–µ—Ä–≤–∏—Å–æ–≤.
    
    Args:
        services: –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        current_index: –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å–µ—Ä–≤–∏—Å–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"services:prev:{current_index}"),
            InlineKeyboardButton(text=f"{current_index + 1}/{len(services)}", callback_data="ignore"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"services:next:{current_index}"),
        ],
        [
            InlineKeyboardButton(text=target_text, callback_data=f'services:spend:{service_id}' if not target_callback else target_callback),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_login_choose():
    keyboard = [
        [
            InlineKeyboardButton(text='üö™ –í–æ–π—Ç–∏', callback_data=f'login:auth'),
            InlineKeyboardButton(text='üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data=f'login:register')
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_auth_choose_method():
    keyboard = [
        [
            InlineKeyboardButton(text='üìû –¢–µ–ª–µ—Ñ–æ–Ω', callback_data=f'login:auth_phone'),
            InlineKeyboardButton(text='üìß –ü–æ—á—Ç–∞', callback_data=f'login:auth_email')
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_buy_passes_keyboard(pasess_ru: List[Products], pasess_foreign: List[Products]):
    keyboard = [
        [
            InlineKeyboardButton(text='üá∑üá∫ –ü—Ä–æ—Ö–æ–¥—ã –†–§', callback_data=f'ignore'),
        ],
    ]
    # Group passes two per row
    for i in range(0, len(pasess_ru), 2):
        row = [
            InlineKeyboardButton(
                text=f"{pasess_ru[i].name}", 
                callback_data=f"passes:buy:{pasess_ru[i].gk_id}"
            )
        ]
        
        # Add second button if available
        if i + 1 < len(pasess_ru):
            row.append(
                InlineKeyboardButton(
                    text=f"{pasess_ru[i+1].name}",
                    callback_data=f"passes:buy:{pasess_ru[i+1].gk_id}"
                )
            )
            
        keyboard.append(row)
    keyboard.append([
        InlineKeyboardButton(text='üåç –ü—Ä–æ—Ö–æ–¥—ã –¥–ª—è –∑–∞—Ä—É–±–µ–∂–∞', callback_data='ignore')
    ])
    # Add passes for foreign countries
    for passes in pasess_foreign:
        keyboard.append([
            InlineKeyboardButton(
                text=f"–ö—É–ø–∏—Ç—å {passes.count} –≤–∏–∑–∏—Ç(–∞)",
                callback_data=f"passes:buy:{passes.gk_id}"
            )
        ])
    keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_sessions_keyboard(sessions: List[Pass], current_index: int, hall_id: int):
    keyboard = [
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"sessions:prev:{current_index}"),
            InlineKeyboardButton(text=f"{current_index + 1}/{len(sessions)}", callback_data="ignore"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"sessions:next:{current_index}"),
        ],
        [
            InlineKeyboardButton(text="üìù –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ª—É", callback_data=f"halls:details:{hall_id}"),
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_choose_banks(banks: list, call_prefix: str):
    keyboard = []
    for bank in banks:
        if bank == 'tinkoff_acquiring':
            keyboard.append([InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π', callback_data=call_prefix+bank)])
        if bank == 'sber':
            keyboard.append([InlineKeyboardButton(text='üíö –ë–æ–Ω—É—Å—ã –æ—Ç –°–±–µ—Ä–°–ø–∞—Å–∏–±–æ', callback_data=call_prefix+bank)])
        if bank == 'yandex-split':
            keyboard.append([InlineKeyboardButton(text='–Ø–Ω–¥–µ–∫—Å –ü—ç–π | –°—Ä–∞–∑—É –∏–ª–∏ —á–∞—Å—Ç—è–º–∏', callback_data=call_prefix+bank)])
    keyboard.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def payment_keyboard(url: str):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
    keyboard = [
        [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å', url=url)],
        [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data='profile')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def back_profile():
    keyboard = [
        [InlineKeyboardButton(text='–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='promo')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='profile')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def back_from_profile(gk_user):
    if gk_user.aeroflot_id:
        keyboard = [
            [InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –ê—ç—Ä–æ–§–ª–æ—Ç', callback_data='add_af_card')],
            [InlineKeyboardButton(text='–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='promo')],
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(text='–ú–æ–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã', callback_data='promo')],
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back')]
        ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_cancel():
    keyboard = [
        [ 
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)